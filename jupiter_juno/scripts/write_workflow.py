#! /usr/bin/env python3
import yaml, os, re

def replace_environ_var(envs, old_str):
  new_str, count = old_str, 0
  while '$' in new_str:
    for key,var in envs.items(): 
      new_str = re.sub('\$' + key, str(var), new_str)
    count += 1
    if count > 10:
      raise RuntimeError('environment variable(s) not found in "%s"' %  new_str)
  return new_str

def replace_vector_var(vecs, old_str):
  new_str, count = old_str, 0
  for key,var in vecs.items():
    new_str = re.sub('\$' + key, str(var), new_str)

def write_job_steps(file, job, detail, major, minor):
  # write header
  file.write('# %d.%d. execute job %s' % (major, minor, job))
  for key, value in detail['strategy']['vector'].items():
    file.write(', %s = %s' % (key, value[minor]))
  file.write('\n')

  # write jobs stesp
  for step in detail['steps']:
    # write step name
    step_name = replace_environ_var(detail['env'], step['name'])
    file.write('## %s\n' % step_name)

    # write step command
    step_run = replace_environ_var(detail['env'], step['run'])
    if step['run'][-1] == '\n':
      file.write('%s' % step_run)
    else:
      file.write('%s\n' % step_run)
    file.write('\n')

def write_all_jobs(file, job, detail, major):
  keys = list(detail['strategy']['vector'].keys())
  if len(keys) == 0:
    nsub_jobs_vector = 0
  else:
    nsub_jobs_vector = len(detail['strategy']['vector'][keys[0]])

  njobs = nsub_jobs_vector
  # loop over vector jobs
  if nsub_jobs_vector > 0:
    for minor in range(nsub_jobs_vector):
      # set environment variable from vector
      for key, value in detail['strategy']['vector'].items():
        detail['env'][key] = value[minor]
      write_job_steps(file, job, detail, major, minor)
  else:
    write_job_steps(file, job, detail, major, 0)
    njobs += 1

  return njobs

if __name__ == '__main__':
  yml_file = 'workflow.yml'
  wrk_file = 'workflow.sh'

  with open(yml_file, 'r') as file:
    try:
      work = yaml.safe_load(file)
    except yaml.YAMLError as exc:
      print(exc)

  with open(wrk_file, 'w') as file:
    file.write('#! /usr/bin/bash\n\n')
    file.write('# This file is automatically generated by %s ' % os.path.basename(__file__))
    file.write('based on %s\n\n' %  yml_file)
    finished_jobs, count, major, njobs = [], 0, 0, 0
    while len(finished_jobs) < len(work['jobs']):
      for job, detail in work['jobs'].items():
        # job has been finished
        if job in finished_jobs:
          continue

        # job has dependency
        if 'needs' in detail:
          dependence_clear = True
          if not isinstance(detail['needs'], list):
            detail['needs'] = [detail['needs']]
          for dep in detail['needs']:
            if dep not in finished_jobs:
              dependence_clear = False
          if not dependence_clear:
            continue

        # dependency clear
        major += 1
        if 'env' not in detail:
          detail['env'] = []

        # write job matrix
        if 'strategy' not in detail:
          detail['strategy'] = {}
          detail['strategy']['vector'] = {}
          detail['strategy']['matrix'] = {}
        else:
          if 'vector' not in detail['strategy']:
            detail['strategy']['vector'] = {}
          if 'matrix' not in detail['strategy']:
            detail['strategy']['matrix'] = {}

        njobs += write_all_jobs(file, job, detail, major)
        finished_jobs.append(job)

      count += 1
      if count > 10:
        raise RuntimeError("Loops count exceeds 1000")
    file.write('# Total number of jobs = %d\n' % njobs)
  print('workflow written to %s' % wrk_file)

  os.system('chmod +x %s' % wrk_file)
